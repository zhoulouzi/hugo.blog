<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Blog zhoulouzi</title>
    <link>https://blog.zhoulouzi.com/categories/docker/</link>
    <description>Recent content in Docker on Blog zhoulouzi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Nov 2017 21:48:15 +0800</lastBuildDate>
    
	<atom:link href="https://blog.zhoulouzi.com/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kubernetes installed</title>
      <link>https://blog.zhoulouzi.com/2017/11/kubernetes/</link>
      <pubDate>Tue, 07 Nov 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/11/kubernetes/</guid>
      <description>概述: 此文档用于在ubuntu16.04上独立安装kubernetes节点 api-server与kubelet、kube-proxy之间通过tls认证交互 control-manager和scheduler通过api-server在本地暴露的127.0.0.1:8080交互
备注：未实现HA模式 ，实现HA模式，官方的文档（https://kubernetes.io/docs/admin/high-availability/）里指明：需要etcd实现集群模式，apiserver是无状态的，在master节点上正常启动，利用云上的lb做负载均衡，感觉dns也行，注意证书问题就可以。，kube-controller-manager，kube-scheduler需要保证同时只有一个实例在work启动加上--leader-elect启动参数。
etcd组件说明： port: 127.0.0.1:2379: listen-client 127.0.0.1:2380: initial-cluster kubelet组件说明： port: 4194: cadvisor-port #cadvisor作为kubernetes一个组件集成在kubelet里 127.0.0.1:10248: localhost healthz endpoint # 10250: Kubelet to server on listen for HTTP and respond to a simple API (underspec’d currently) to submit a new manifest. 10255: The read-only port for the Kubelet to serve on with no authentication/authorization # 只读
暴露kubelet里的指标 http://192.168.199.142:10255/stats/summary kube-proxy组件： port： 127.0.0.1:10249: metrics server to serve on # metrics server 并未安装待探索 10256: health check server port 代理的其他服务端口</description>
    </item>
    
    <item>
      <title>minikube offline installed</title>
      <link>https://blog.zhoulouzi.com/2017/10/minikube/</link>
      <pubDate>Sat, 07 Oct 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/10/minikube/</guid>
      <description>目标： 在没有网络接入的情况下安装minikube。供公司app demo 演示使用环境。 https://github.com/zhoulouzi/minikube_install_offline
建议在网络正常的情况下使用一次minikube，然后在做offline的安装 需要提前下载几个东西： 1、kubectl 的二进制文件 官网下载 放到/usr/local/bin/ 下即可 2、minikube 的二进制文件 官网下载 放到/usr/local/bin/ 下即可 3、docker的离线安装包 docker 离线安装
4、minikube 要跑起来所需要的docker镜像： gcr.io/google_containers/kubernetes-dashboard-amd64 v1.6.3 gcr.io/google_containers/k8s-dns-sidecar-amd64 1.14.5 gcr.io/google_containers/k8s-dns-kube-dns-amd64 1.14.5 gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64 1.14.5 gcr.io/google-containers/kube-addon-manager v6.4-beta.2 gcr.io/google_containers/pause-amd64 3.0 docker image save 到一个tar包即可，同时也可以将所需的app docker镜像 save下来 minikube addons 里面disabled 的 镜像未做研究。 5、minikue.iso 下载地址：https://storage.googleapis.com/minikube/iso/minikube-v0.23.5.iso  minikube 启动参数：
/usr/local/bin/minikube start &amp;ndash;vm-driver=none &amp;ndash;iso-url file://tmp/minikube-v0.23.5.iso &amp;ndash;kubernetes-version v1.7.5 &amp;ndash;extra-config=apiserver.Service.NodePortRange=0-60000
确保 一个localkube的服务正常启动
做完这些 正常使用kubectl apply 你的服务。</description>
    </item>
    
    <item>
      <title>Prometheus vs influxDB</title>
      <link>https://blog.zhoulouzi.com/2017/04/prometheus/</link>
      <pubDate>Wed, 05 Apr 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/04/prometheus/</guid>
      <description>InfluxDB是一个由influxData开源的时序型数据库，Go编写，着力于高性能地查询与存储时序型数据，loT行业的实时数据等场景，influxDB在技术实现上充分利用了Go语言的特性，无需任何外部依赖即可独立部署。
prometheus是SoundCloud开源的监控警报系统，Go编写，主要特点是： 1. 多维度的数据模型(time series identified by metric name and key/value pairs) 2. promQL强大灵活的查询语言 3. 不依赖分布式存储 4. HTTP pull模式 收集 time series 这点跟influxdb的push模式不一样。 5. 通过pushgateway来支持push time series，适合short-lived job。 6. 可以通过服务发现或者静态配置scarpe目标 7. 支持多种模式的图形和仪表盘
Influxdb的查询语句类似SQL方便用户进行数据查询。这点prometheus是使用了promQL,这里有一个prometheus作者对Graphite, InfluxDB and Prometheus 三者的查询的对比。 Translating between monitoring languages
TICK stack这边的东西：
telegraf： {: width=&amp;ldquo;800px&amp;rdquo; height=&amp;ldquo;480px&amp;rdquo;}
概念: input,ouput,processor,aggerator
input： telegraf可以parse以下的数据格式到metrics 1. influxDB LIne Protocol 2. JSON 3. Graphite 4. value 举例: 45 or &amp;ldquo;abc&amp;rdquo; 5. nagios 6. collectd telegraf metircs 比如说 influxDB points(就像SQL的一个row)由以下4部分组成，其实这4个部分就是 influxDB line protocol： 1.</description>
    </item>
    
  </channel>
</rss>