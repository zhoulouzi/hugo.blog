<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on zhoulouzi&#39;s Blog</title>
    <link>https://blog.zhoulouzi.com/post/</link>
    <description>Recent content in Posts on zhoulouzi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Aug 2018 11:48:15 +0800</lastBuildDate>
    
	<atom:link href="https://blog.zhoulouzi.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>calico-flannel-weave</title>
      <link>https://blog.zhoulouzi.com/2018/08/kubernetes/</link>
      <pubDate>Tue, 07 Aug 2018 11:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2018/08/kubernetes/</guid>
      <description>calico: calico提供了多种部署方式，ipip，node-to-node BGP mesh，global/node specific 需要根据你的依赖网络环境来决定如何部署。 ipip: calico 会在每个node之间配置一个ip tunnel来转发package node-to-node BGP mesh: 每个节点利用bird建立bgp peer关系，节点通过路由表来转发packag(官方推荐是小于50个节点)
要看的几篇文章： https://docs.projectcalico.org/v3.1/reference/architecture/ https://docs.projectcalico.org/v3.1/reference/architecture/components https://docs.projectcalico.org/v3.1/reference/architecture/data-path
https://docs.projectcalico.org/v3.1/reference/private-cloud/l2-interconnect-fabric https://docs.projectcalico.org/v3.1/reference/private-cloud/l3-interconnect-fabric
简单测试数据 [ 6] 0.0-10.0 sec 1.07 GBytes 920 Mbits/sec [ 5] 0.0-10.0 sec 1.09 GBytes 937 Mbits/sec
flannel vxlan backend: work in kernel space
udp backend: work in userspace docker0 &amp;mdash; flanel0(tun) &amp;mdash; flanneld https://blog.laputa.io/kubernetes-flannel-networking-6a1cb1f8ec7c https://docs.openshift.com/container-platform/3.10/architecture/networking/network_plugins.html vxlan https://www.slideshare.net/enakai/how-vxlan-works-on-linux https://events.static.linuxfound.org/sites/events/files/slides/2013-linuxcon.pdf
WEAVE NET FastDataPath: kernel space sleeve: userspace
特点 Virtual Ethernet Switch Weave Net creates a virtual network that connects Docker containers deployed across multiple hosts.</description>
    </item>
    
    <item>
      <title>kubernetes-local-perisistent-storage</title>
      <link>https://blog.zhoulouzi.com/2018/03/kubernetes-local/</link>
      <pubDate>Wed, 07 Mar 2018 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2018/03/kubernetes-local/</guid>
      <description>Kubernetes-local-perisistent-storage 最近苦于公司没有上ceph、gluster、nfs这些volume provider，用了很久的hostpath+nodeselector，但是二者组合的方式对于部署statefulset的应用来说，很不方便，kubecon上有关于local-perisistent-storage这块的介绍吸引了我们来试试这个local volume的威力。 首先，我们来看一下文档 1、local volume的介绍(https://kubernetes.io/docs/concepts/storage/volumes/#local) 2、github：(https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume）
仔细阅读了这两篇文章之后，我们来做个实验。 环境： kubernets 1.9.3
step1： api-server, controller-manager, scheduler, and all kubelets 开启 feature-gates的功能：
 --feature-gates=PersistentLocalVolumes=true,VolumeScheduling=true,MountPropagation=true  step2: Creating a StorageClass:
 $ cat local-storage.yaml # Only create this for K8s 1.9+ apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: local-storage provisioner: kubernetes.io/no-provisioner volumeBindingMode: WaitForFirstConsumer
 step3: Manually create local persistent volume
 #文档中提供了一个 local volume static provisioner ，大概的功能就是 自动将你定义的path里的子文件夹 创建成 persistent volume #这里没有使用这种方式，而是选择了手动创建。 这里一定要关注一下 pv的 accessModes persistentVolumeReclaimPolicy 这两个参数，理解他们的意思。</description>
    </item>
    
    <item>
      <title>kubectl explain</title>
      <link>https://blog.zhoulouzi.com/2018/01/kubernetes/</link>
      <pubDate>Wed, 31 Jan 2018 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2018/01/kubernetes/</guid>
      <description>kubectl explain 之前很头疼kubernets的yaml文件怎么写，后天发现其实如果你装好了了kubectl你就随时随地的可以找到配置文件怎么写，kubectl explain 搭配 kubernetes官网API文档，yaml配置层级很清晰。
# kubectl explain -h kubectl explain secrets kubectl explain secrets --recursive DESCRIPTION: Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes. FIELDS: apiVersion &amp;lt;string&amp;gt; data &amp;lt;map[string]string&amp;gt; kind &amp;lt;string&amp;gt; metadata &amp;lt;Object&amp;gt; annotations &amp;lt;map[string]string&amp;gt; clusterName &amp;lt;string&amp;gt; creationTimestamp &amp;lt;string&amp;gt; deletionGracePeriodSeconds &amp;lt;integer&amp;gt; deletionTimestamp &amp;lt;string&amp;gt; finalizers &amp;lt;[]string&amp;gt; generateName &amp;lt;string&amp;gt; generation &amp;lt;integer&amp;gt; initializers &amp;lt;Object&amp;gt; pending &amp;lt;[]Object&amp;gt; name &amp;lt;string&amp;gt; result &amp;lt;Object&amp;gt; apiVersion &amp;lt;string&amp;gt; code &amp;lt;integer&amp;gt; details &amp;lt;Object&amp;gt; causes &amp;lt;[]Object&amp;gt; field &amp;lt;string&amp;gt; message &amp;lt;string&amp;gt; reason &amp;lt;string&amp;gt; group &amp;lt;string&amp;gt; kind &amp;lt;string&amp;gt; name &amp;lt;string&amp;gt; retryAfterSeconds &amp;lt;integer&amp;gt; uid &amp;lt;string&amp;gt; kind &amp;lt;string&amp;gt; message &amp;lt;string&amp;gt; metadata &amp;lt;Object&amp;gt; continue &amp;lt;string&amp;gt; resourceVersion &amp;lt;string&amp;gt; selfLink &amp;lt;string&amp;gt; reason &amp;lt;string&amp;gt; status &amp;lt;string&amp;gt; labels &amp;lt;map[string]string&amp;gt; name &amp;lt;string&amp;gt; namespace &amp;lt;string&amp;gt; ownerReferences &amp;lt;[]Object&amp;gt; apiVersion &amp;lt;string&amp;gt; blockOwnerDeletion &amp;lt;boolean&amp;gt; controller &amp;lt;boolean&amp;gt; kind &amp;lt;string&amp;gt; name &amp;lt;string&amp;gt; uid &amp;lt;string&amp;gt; resourceVersion &amp;lt;string&amp;gt; selfLink &amp;lt;string&amp;gt; uid &amp;lt;string&amp;gt; stringData &amp;lt;map[string]string&amp;gt; type &amp;lt;string&amp;gt; 试着在终端敲下这几个命令。（爸爸再也不用担心我写配置了）  额外分享一个工具，看看是什么吧？ Registry creds &amp;lt;-&amp;gt; config.</description>
    </item>
    
    <item>
      <title>kubernetes install offline</title>
      <link>https://blog.zhoulouzi.com/2017/11/kubernetes/</link>
      <pubDate>Tue, 07 Nov 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/11/kubernetes/</guid>
      <description>kubernetes install offline step by step  概述: 此文档用于在ubuntu16.04上独立安装kubernetes节点 api-server与kubelet、kube-proxy之间通过tls认证交互 control-manager和scheduler通过api-server在本地暴露的127.0.0.1:8080交互
备注： 未实现HA模式 ，实现HA模式，官方的文档https://kubernetes.io/docs/admin/high-availability/里指明：需要etcd实现集群模式，apiserver是无状态的，在master节点上正常启动，利用云上的lb做负载均衡，感觉dns也行，注意证书问题就可以。，kube-controller-manager，kube-scheduler需要保证同时只有一个实例在work启动加上--leader-elect启动参数。
 etcd组件说明： port: 127.0.0.1:2379: listen-client 127.0.0.1:2380: initial-cluster  kubelet组件说明： port: 4194: cadvisor-port #cadvisor作为kubernetes一个组件集成在kubelet里 127.0.0.1:10248: localhost healthz endpoint # 10250: Kubelet to server on listen for HTTP and respond to a simple API (underspec’d currently) to submit a new manifest. 10255: The read-only port for the Kubelet to serve on with no authentication/authorization # 只读暴露kubelet里的指标 http://192.168.199.142:10255/stats/summary  kube-proxy组件： port： 127.</description>
    </item>
    
    <item>
      <title>Raft 初识</title>
      <link>https://blog.zhoulouzi.com/2017/11/raft/</link>
      <pubDate>Sun, 05 Nov 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/11/raft/</guid>
      <description>the secret lives of data http://thesecretlivesofdata.com/raft/
the Raft Consensus Algorithm https://raft.github.io/
Raft: The raft-the-understandable-distributed-consensus-protocol Distributed Consensus Protocol https://speakerdeck.com/benbjohnson/raft-the-understandable-distributed-consensus-protocol/</description>
    </item>
    
    <item>
      <title>minikube install offline</title>
      <link>https://blog.zhoulouzi.com/2017/10/minikube/</link>
      <pubDate>Sat, 07 Oct 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/10/minikube/</guid>
      <description> minikube install offline step by step 目标： 在没有网络接入的情况下安装minikube。供公司app demo 演示使用环境,建议在网络正常的情况下使用一次minikube，然后在尝试offline的安装。
准备 需要提前下载几个东西：
 kubectl 的二进制文件 官网下载 放到/usr/local/bin/ 下即可 minikube 的二进制文件 官网下载放到/usr/local/bin/ 下即可 docker的离线安装包 docker 离线安装 minikube要跑起来所需要的docker镜像：
gcr.io/google_containers/kubernetes-dashboard-amd64 v1.6.3 gcr.io/google_containers/k8s-dns-sidecar-amd64 1.14.5 gcr.io/google_containers/k8s-dns-kube-dns-amd64 1.14.5 gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64 1.14.5 gcr.io/google-containers/kube-addon-manager v6.4-beta.2 gcr.io/google_containers/pause-amd64 3.0 docker image save 导出tar包，方便随时在离线环境使用  minikue.iso 下载地址：minikube.iso
  使用定制参数启动minikube /usr/local/bin/minikube start --vm-driver=none --iso-url file://tmp/minikube-v0.23.5.iso --kubernetes-version v1.7.5 --extra-config=apiserver.Service.NodePortRange=0-60000  完成 </description>
    </item>
    
    <item>
      <title>leetcode 笔记</title>
      <link>https://blog.zhoulouzi.com/2017/09/leetcode/</link>
      <pubDate>Tue, 05 Sep 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/09/leetcode/</guid>
      <description>总结出一些比较意义的题  好久没有更新自己的博客了，自从3月份跳槽到现在这几个月一直很忙，所以也一直没有时间更新，最近自己也抽空去leetcode刷题，补一补薄弱的环节。就从easy难度的开始刷起，刷完这600多道题。
 1. Given an array of integers, every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
 我的解法很平常遍历一遍列表给每个元素计数，返回值为1的元素，但是并不符合Note里提到的。于是在大神们的Solutions找到了这个答案：One-line python solution with O(n) time
 def singleNumber(self, nums): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :rtype: int &amp;quot;&amp;quot;&amp;quot; return reduce(lambda x, y: x ^ y, nums)   第一眼看，什么鬼，x 的 y次方～ 想了半天才明白 相同2个数 异或运算结果就是0 0和任意数 异或运算都是 任意数本身啊。 reduce下这个列表，完美。</description>
    </item>
    
    <item>
      <title>资环十年</title>
      <link>https://blog.zhoulouzi.com/2017/06/zihuan/</link>
      <pubDate>Wed, 07 Jun 2017 21:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/06/zihuan/</guid>
      <description> 怀念不如相见。 从去年底，微信群里就滴滴不停，大家怂恿着要回学校给今年毕业的兄弟办一场告别赛。话说我们这帮兄弟都是毕业好几年的人了，整天混迹于校园群聊，还整天BB着那个学院今年来比较有实力的选手，那个学院今年怎么招摇了，押注那个学院今年夺冠，其实我看出来了，都是想回去踢个球，喝顿酒，在学弟面前吹吹逼，找找当年的感觉。
不过说真的，那些年在球队的日子真的是神仙般的生活，踢球，喝酒，吹逼。纯爷们才能一起干的事，你说对吧，Tango？ 5月份，我开始筹备这些事，特别感谢宋忠贤同学的跑腿，帮安排酒店，看欧冠的地方，很不错，大家玩的很嗨。有的兄弟结婚了，有的兄弟事业忙，所以定了一个6月3，4日一个不太炎热的日子。最后报名人数还可以20个人，最后各种原因你懂的，实际到场人数大打折扣。毕了业还这么坑？田老板？毅哥？这二位都是毕业好久没见的兄弟，挺想你们的，上次在北京，没喝够。 老五，谁在我上铺的兄弟，4年的感情一碰就会哭。胖了，听说偷偷跑回学校表白小学妹了？可以啊，66666。 继红哥，球技又提升了，有空回太原和你和亮哥踢，当年教诲，培养毕生难忘。 晓龙，敢无视老子太上皇的位子，成天在学弟面前贬低我的17号？对象不错。嗯。 胖子，你不来，你后悔不，见不了你哥。
附靓照N张：
2017年6月3日: 与学弟们的合照 2010年校联赛-资源环境学院冠军 2011年校联赛-资源环境学院八强 2012年校联赛-资源环境学院八强 2013年校联赛-资源环境学院亚军 </description>
    </item>
    
    <item>
      <title>docker pre-install kernel-check</title>
      <link>https://blog.zhoulouzi.com/2017/03/docker/</link>
      <pubDate>Tue, 07 Mar 2017 11:48:15 +0800</pubDate>
      
      <guid>https://blog.zhoulouzi.com/2017/03/docker/</guid>
      <description>docker pre-install kernel-check Docker官方明确要求了kernel版本要在version 3.10及以上，（但是在centos上还是遇到了很多bug，如果你用centos7我觉得应该在3.18以上，ubuntu的内核比较新，出问题较少）另外官方还是提供了一个check脚本，所以我们可以利用这个脚本check下我们的kernel缺少那些东西。
step 1、curl https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh &amp;gt; check-config.sh 2、bash ./check-config.sh  result [root@master1 ~]# bash check-config.sh warning: /proc/config.gz does not exist, searching other paths for kernel config ... info: reading kernel config from /boot/config-3.10.0-693.el7.x86_64 ... Generally Necessary: - cgroup hierarchy: properly mounted [/sys/fs/cgroup] - CONFIG_NAMESPACES: enabled - CONFIG_NET_NS: enabled - CONFIG_PID_NS: enabled - CONFIG_IPC_NS: enabled - CONFIG_UTS_NS: enabled - CONFIG_CGROUPS: enabled - CONFIG_CGROUP_CPUACCT: enabled - CONFIG_CGROUP_DEVICE: enabled - CONFIG_CGROUP_FREEZER: enabled - CONFIG_CGROUP_SCHED: enabled - CONFIG_CPUSETS: enabled - CONFIG_MEMCG: enabled - CONFIG_KEYS: enabled - CONFIG_VETH: enabled (as module) - CONFIG_BRIDGE: enabled (as module) - CONFIG_BRIDGE_NETFILTER: enabled (as module) - CONFIG_NF_NAT_IPV4: enabled (as module) - CONFIG_IP_NF_FILTER: enabled (as module) - CONFIG_IP_NF_TARGET_MASQUERADE: enabled (as module) - CONFIG_NETFILTER_XT_MATCH_ADDRTYPE: enabled (as module) - CONFIG_NETFILTER_XT_MATCH_CONNTRACK: enabled (as module) - CONFIG_NETFILTER_XT_MATCH_IPVS: enabled (as module) - CONFIG_IP_NF_NAT: enabled (as module) - CONFIG_NF_NAT: enabled (as module) - CONFIG_NF_NAT_NEEDED: enabled - CONFIG_POSIX_MQUEUE: enabled - CONFIG_DEVPTS_MULTIPLE_INSTANCES: enabled Optional Features: - CONFIG_USER_NS: enabled (RHEL7/CentOS7: User namespaces disabled; add &#39;user_namespace.</description>
    </item>
    
  </channel>
</rss>